	var ParcelsInterface = (function(){
		var pi;
		var iframe;
		var allElements = document.body.getElementsByTagName("*");
		//view
		var createAnnotationListItem = function(list,annotation,children){
			return $B("li", {
				children: children,
				data: annotation,
				onmouseover: function(){
					clearAllInvolvedAndSelector();
					list.highlighted = queryDocument(this.data.xpath);
					setElements(list.highlighted,"parcels_listshow",null);
				},
				onmouseout: function() {
					clearElements(list.highlighted,"parcels_listshow");
				}
			});
		}
		var displayAnnotations = function(annotations) {
			var list = pi.suggestor.list;
			removeAllChildren(list);
			if (annotations) {
				for (var i = 0; i < annotations.length; i++) {
					list.appendChild(
						createAnnotationListItem(list,annotations[i],[$B("span",{
							innerHTML: annotations[i].label
						})])
					);
				}
			}
			list.scrollTop = list.scrollHeight;
		};
		var createSuggestedList = function(annotations){//returns a ul of list.
			var list = $B("ul",{
				className: parcelsInterfaceStyle+" xpath_list"
			});
			for (var i = 0; i < annotations.length; i++) {
				list.appendChild(
					createAnnotationListItem(list,annotations[i],[
						$B("input",{
							type: "checkbox",
							name: "annotation_ids[]",
							value: annotations[i].id
						}),
						$B("span",{
							innerHTML: annotations[i].label
						})
					])
				);
			}
			return list;
		};
		
		var createAnnotationSuggest = function(annotations) {
			var annotation_form = $B("form",{
				action:set_annotations,
				children:[
					createSuggestedList(annotations),
					$B("input",{name:"id",type:"hidden",value:pi.suggestor.page_id_field.value}),
					$B("input",{type:"submit",value:"Add"})
				]
			});
			var sugWindow = new ParcelsWindow(
				[annotation_form],
				"recommendations",
				function() {
					sugWindow.close();
				},
				{left:40,top:40}
			);
			Connection.MakeIframeTarget(annotation_form,false,function(){
				loader.request({id:pi.suggestor.page_id_field.value});
				sugWindow.close();
				delete float_div;
			});
		}
		//controllers
		var loader = new Connection.JSONDataRequest(
			load_annotations,
			"requestPageData",
			function(page,first){
				if(first) {
					/**
					new Connection.JSONDataRequest(
						suggest_annotations,
						"suggestAnnotations",
						function(annotations){
							var i = 0;
							while(i<annotations.length) {
								var has_match = document.evaluate(
									annotations[i].xpath,
									document, null, XPathResult.BOOLEAN_TYPE, null
								).booleanValue
								if(!has_match) {
									annotations.splice(i,1);
									console.log("no match");
								}
								else i++;
							}
							if(annotations.length>0) createAnnotationSuggest(annotations);
						}
					).request({domain:document.location.hostname}) **/
				} else {
					displayAnnotations(page.annotations);
				}
				pi.suggestor.page_id_field.value = page.id;

			}
		);

		var clearElements = function(elements,className){
			if(!elements) return;
			for(var i=elements.length-1;i>=0;i--){
				removeClass(elements[i],className);
				delete elements[i].parcels_action;
			}
		};
		var setElements = function(elements,className,fun){
			if(!elements) return;
			for(var i=elements.length-1;i>=0;i--){
				addClass(elements[i],className);
				elements[i].parcels_action = fun;
			}
		};
		var clearAllInvolved = function(){
			if (pi && pi.selector) {
				clearElements(pi.selector.tracker.selected, styles.selected)
				clearElements(pi.selector.tracker.rejected, styles.rejected);
				clearElements(pi.selector.tracker.highlighted, styles.highlighted);
			}
		}
		var clearAllInvolvedAndSelector = function() {
			if (pi && pi.selector) {
				clearAllInvolved();
				delete pi.selector;
				pi.selector = new ParcelsSelector();
			}
		}
		var overrideActions = {
			onclick: function(e){
				blockevent(e);
				if(pi.selector.tracker.selected.length > 0 &&
					pi.selector.tracker.selected[0].tagName != this.tagName) return false;
				if(!this.parcels_action) this.parcels_action = parcels_actions.select;
				var parcels_action = this.parcels_action;
				
				clearAllInvolved();
				//console.log(this);
				parcels_action(this);
				//update textbox
				pi.suggestor.xpath_field.value = pi.selector.tracker.xpath;

				setElements(pi.selector.tracker.highlighted,styles.highlighted,parcels_actions.reject);
				setElements(pi.selector.tracker.rejected,styles.rejected,parcels_actions.dereject);
				setElements(pi.selector.tracker.selected,styles.selected,parcels_actions.deselect);
				
				console.log(JSON.stringify(pi.selector.tracker.raw));
				return false;
			},
			onmouseover: function(e){
				if(pi.selector.tracker.selected.length > 0 &&
					pi.selector.tracker.selected[0].tagName != this.tagName) return false;
				pi.box.setPosition(getPos(this), {
					width: this.offsetWidth,
					height: this.offsetHeight
				});
				pi.box.setText(this.parentNode.tagName + " " + this.tagName);
				this.parcels_temp_zIndex = this.style.zIndex;
				this.style.zIndex = "999999";
				blockevent(e);
				return false;
			},
			onmouseout: function(e){
				blockevent(e);
				pi.box.setVisible(false);
				this.style.zIndex = this.parcels_temp_zIndex; 
				return false;
			}
		};
		var parcels_actions = {
			select: function(e){//change to green
				return pi.selector.selectElement(e);
			},
			reject: function(e){
				return pi.selector.rejectElement(e);
			},
			deselect: function(e){
				return pi.selector.selectedDelete(e);
			},
			dereject: function(e){
				return pi.selector.rejectedDelete(e);
			}
		};
		exit = function(){
		    //return all events back to original owner.
		    for (var event in overrideActions) {
		        for (var i = 0; i < allElements.length; i++) {
		            allElements[i][event] = allElements[i]['parcels_' + event];
		        }
		    }
		    //remove all additional elements added onto page
			$B.destroyAll();
			
			clearAllInvolved();
		    delete pi.selector;
			delete pi;
		};
		
		//initialize
		overridePageElements(overrideActions);
		pi =  {
			suggestor: createSuggestor(),
			box: createBox(),
			selector: new ParcelsSelector()
		};
		Connection.MakeIframeTarget(pi.suggestor.workspace,"annotation",function(){
			clearAllInvolvedAndSelector();
			loader.request({id:pi.suggestor.page_id_field.value});
			pi.suggestor.label_field.value = "";
			pi.suggestor.xpath_field.value = "";
		});
		
		loader.request({page:{url:document.location.href,title:document.title}});
		pi.suggestor.label_field.value = pi.suggestor.label_field.placeholder;
		return pi;
	})();

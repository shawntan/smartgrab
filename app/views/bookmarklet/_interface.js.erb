	var exit;
	var ParcelsInterface = (function(){
		var pi;
		var iframe;
		var allElements = document.body.getElementsByTagName("*");
		//view
	    var border_width = 5;
		var makeBoxBorders = function(border_width, fix_side){
			var self = this;
			var d = $B('div', {className: parcelsInterfaceStyle+" "+"box_border"});
			d.style[fix_side] = border_width + "px";
			return d;
		};
		var createBox = function(){//box : this is the thing that "boxes" up the elements to be selected
			var _box = {
	        	visible: false,
	        	top: makeBoxBorders(border_width, "height"),
	        	bottom: makeBoxBorders(border_width, "height"),
	        	left: makeBoxBorders(border_width, "width"),
	        	right: makeBoxBorders(border_width, "width"),
	        	text: $B('span', {
	            	className: parcelsInterfaceStyle,
	        	}),
				setPosition: function(position, size){
					_box.setVisible(true);
					_box.bottom.style.width = _box.top.style.width = (size.width + border_width * 2) + "px";
					_box.left.style.height = _box.right.style.height = size.height + "px";
					_box.left.style.top = _box.right.style.top = position.top + "px";
					_box.left.style.left = _box.bottom.style.left = _box.top.style.left = (position.left - border_width) + "px";
					_box.top.style.top = position.top - border_width + "px";
					_box.right.style.left = position.left + size.width + "px";
					_box.bottom.style.top = position.top + size.height + "px";
				},
				setText: function(text){
					_box.text.innerHTML = text;
				},
				setVisible: function(visible){
					if (visible != _box.visible) {
						_box.top.style.display =
						_box.bottom.style.display = 
						_box.left.style.display = 
						_box.right.style.display = visible ? "block" : "none";
						_box.visible = visible;
					}
				}
			};
			_box.bottom.style.height = "auto";
			document.body.appendChild(_box.top);
			document.body.appendChild(_box.left);
			document.body.appendChild(_box.bottom);
			document.body.appendChild(_box.right);
			_box.bottom.appendChild(_box.text);
			return _box;
		};
		var createSuggestor = function(){//suggestor: this is the prompt at the top right hand corner that "suggests" the xpath
			var header = $B("div", {
				children: [$B('div', {
					className: parcelsInterfaceStyle,
	            	innerHTML: "X",
	            	style: {
	                	'float': 'right',
	                	display: "block",
						clear: "left"
					},
					onclick: function(){
						exit(self);
					}
				})]
			});
			var list = $B("ul", {className: parcelsInterfaceStyle + " " + "xpath_list",});
			var status = $B("div",{className:parcelsInterfaceStyle});
			var page_id_field,xpath_field,label_field;
			var workspace = $B("form",{
				className: parcelsInterfaceStyle + " " + "workspace",
				children:[
					page_id_field = $B("input",{type:"hidden",name:"page_id"}),
					label_field = $B("input",{
						type: "text",
						name: "label",
						placeholder: "Label Name"
					}),
					xpath_field = $B("input",{type:"hidden",name:"xpath"}),
					$B("input",{value:"Add Selection",type:"submit",exclude:true})
				],
				action: create_annotation,
				method: "POST"
			});
			
			Connection.MakeIframeTarget(workspace,"annotation",function(){
				clearAllInvolvedAndSelector();
				loader.request({id:page_id_field.value});
				label_field.value = "";
				xpath_field.value = "";
			});
			var main = $B("div", {
				className: parcelsInterfaceStyle+" "+"main",
				children: [list,workspace,status]
			});
			var s = $B("div", {
				className: parcelsInterfaceStyle+" "+"suggestor",
		        children: [header, main],
		        setText: function(){
		            if (s.selectedXPath) 
		                status.innerHTML = s.selectedXPath;
					else status.innerHTML = "nothing selected";
		           // if (s.rejectedXPath) 
		           //     main.innerHTML += "Rejected: " + s.rejectedXPath + "<br/>";
		        }
		    });
			s.page_id_field = page_id_field;
			s.xpath_field = xpath_field;
			s.label_field = label_field;
			s.list = list;
		    document.body.appendChild(s);
		    return s;
		}
		var displayAnnotations = function(annotations) {
			var list = pi.suggestor.list;
			removeAllChildren(list);
			if (annotations) {
				for (var i = 0; i < annotations.length; i++) {
					list.appendChild($B("li", {
						innerHTML: annotations[i].label,
						data: annotations[i],
						onmouseover: function(){
							clearAllInvolvedAndSelector();
							list.highlighted = queryDocument(this.data.xpath);
							setElements(list.highlighted,"parcels_listshow",null);
						},
						onmouseout: function() {
							clearElements(list.highlighted,"parcels_listshow");
						}
					}));
				}
			}
			list.scrollTop = list.scrollHeight;
		};
		
		//controllers
		var loader = new Connection.JSONDataRequest(
			load_annotations,
			"requestPageData",
			function(page,first){
				displayAnnotations(page.annotations);
				pi.suggestor.page_id_field.value = page.id;
			}
		);
		var clearElements = function(elements,className){
			if(!elements) return;
			for(var i=elements.length-1;i>=0;i--){
				removeClass(elements[i],className);
				delete elements[i].parcels_action;
			}
		};
		var setElements = function(elements,className,fun){
			if(!elements) return;
			for(var i=elements.length-1;i>=0;i--){
				addClass(elements[i],className);
				elements[i].parcels_action = fun;
			}
		};
		var clearAllInvolved = function(){
			if (pi && pi.selector) {
				clearElements(pi.selector.tracker.selected, styles.selected)
				clearElements(pi.selector.tracker.rejected, styles.rejected);
				clearElements(pi.selector.tracker.highlighted, styles.highlighted);
			}
		}
		var clearAllInvolvedAndSelector = function() {
			if (pi && pi.selector) {
				clearAllInvolved();
				delete pi.selector;
				pi.selector = new ParcelsSelector();
			}
		}
		var overrideActions = {
			onclick: function(e){
				blockevent(e);
				if(pi.selector.tracker.selected.length > 0 &&
					pi.selector.tracker.selected[0].tagName != this.tagName) return false;
				if(!this.parcels_action) this.parcels_action = parcels_actions.select;
				var parcels_action = this.parcels_action;
				
				clearAllInvolved();
				
				parcels_action(this);
				pi.suggestor.xpath_field.value = pi.selector.tracker.xpath;
				
				setElements(pi.selector.tracker.highlighted,styles.highlighted,parcels_actions.reject);
				setElements(pi.selector.tracker.rejected,styles.rejected,parcels_actions.dereject);
				setElements(pi.selector.tracker.selected,styles.selected,parcels_actions.deselect);
				
				return false;
			},
			onmouseover: function(e){
				if(pi.selector.tracker.selected.length > 0 &&
					pi.selector.tracker.selected[0].tagName != this.tagName) return false;
				pi.box.setPosition(getPos(this), {
					width: this.offsetWidth,
					height: this.offsetHeight
				});
				pi.box.setText(this.parentNode.tagName + " " + this.tagName);
				this.parcels_temp_zIndex = this.style.zIndex;
				this.style.zIndex = "999999";
				blockevent(e);
				return false;
			},
			onmouseout: function(e){
				blockevent(e);
				pi.box.setVisible(false);
				this.style.zIndex = this.parcels_temp_zIndex; 
				return false;
			}
		};
		var parcels_actions = {
			select: function(e){//change to green
				return pi.selector.selectElement(e);
			},
			reject: function(e){
				return pi.selector.rejectElement(e);
			},
			deselect: function(e){
				return pi.selector.selectedDelete(e);
			},
			dereject: function(e){
				return pi.selector.rejectedDelete(e);
			}
		};
		exit = function(){
		    //return all events back to original owner.
		    for (var event in overrideActions) {
		        for (var i = 0; i < allElements.length; i++) {
		            allElements[i][event] = allElements[i]['parcels_' + event];
		        }
		    }
		    //remove all additional elements added onto page
			$B.destroyAll();
			
			clearAllInvolved();
		    delete pi.selector;
			delete pi;
		};
		
		//initialize
		overridePageElements(overrideActions);
		pi =  {
			suggestor: createSuggestor(),
			box: createBox(),
			selector: new ParcelsSelector()
		};
		loader.request({page:{url:document.location.href,title:document.title}});
		pi.suggestor.label_field.value = pi.suggestor.label_field.placeholder;
		return pi;
	})();

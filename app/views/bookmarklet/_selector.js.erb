	var ParcelsSelector = function(){
		
		/**
		 * special methods to zhng elements
		 */
		HTMLElement.prototype.getSelectorPath = function() {
			var result;
			if(this.path) {
				result = this.path;
			} else {
				var curr = this;
				result = [];
				do {
					preprocessor(curr);
					result.unshift(curr.model);
					curr = curr.parentNode
				} while ((curr != document.body));
				this.path = result;
			}
			return result;
		};
		var preprocessor = function(e) {
			if (e.model) return;
			else {
				var result = {
					tagName: e.tagName.toLowerCase(),
					index: e.getIndex()
				};
				if(e.id) result.id = e.id;
				var last = e.isLast();
				if (last) result.last = last;
				var classes = e.getClasses();
				if (classes) result.classes = classes;
				e.model = result;
			}
		};

		/**
		 * Lists priority in selector for XPath string.
		 **/
		var selector_priority = [
			function(pe){if(pe.index) return pe.index},
			function(pe){if(pe.last) return "last()"},
			function(pe){if (pe.classes) return "contains(concat(' ',@class,' '),' " + pe.classes[0] + " ')"},
		];
		
		var selector = function(e) {
			var tagName = e.tagName;
			var selector;
			for(var i=0;i<selector_priority.length;i++){
				selector = selector_priority[i](e);
				if(selector) break;
			}
			return tagName + (selector?'['+selector+']':"");
		};
		var array2XPath = function(arr) {
			//console.log(arr);
			var result = "/html/body";
			var match_any = false;
			for(var i=0;i<arr.length;i++){
				if(arr[i]=='*') {
					if(match_any) continue;
					else {
						match_any = true;
						result = result + '/';
					}
				} else {
					match_any = false;
					if (arr[i].id) {
						result = '//' + arr[i].tagName + "[@id='" + arr[i].id + "']";
					}
					else {
						console.log(arr[i]);
						result = result + '/' + selector(arr[i]); 
					} 
						
				}
			}
			return result;
		};

		var commonId = function(e1,e2,pseudo){
			if(!e1.id || !e2.id) return; 
			if (e1.id == e2.id) {
				return pseudo.id = e1.id;
			}
		};
		var commonTagName = function(e1,e2,pseudo){
			if (e1.tagName == e2.tagName) {
				return pseudo.tagName = e1.tagName;
			}
		};
		var commonClasses = function(e1,e2,pseudo){
			var classes1 = e1.classes;
			var classes2 = e2.classes;
			if(classes1.length==0||classes2.length==0) return;
			var results = [];
			var i = classes1.length;
			while (i--) {
				if(classes1[i] == "parcels_selected") continue;
				else if(classes1[i] == "parcels_highlight") continue;
				else if(classes2.indexOf(classes1[i]) >= 0) results.unshift(classes1[i]);
			}
			if(results.length > 0) return pseudo.classes = results;
		};
		var commonIndex   = function(e1,e2,pseudo){
			if(pseudo.tagName|| e1.tagName==e2.tagName) {
				if(e1.index==e2.index) {
					pseudo.index = e1.index;
				}
			}

		};
		var commonIsLast  = function(e1,e2,pseudo){
			if (pseudo.tagName || e1.tagName == e2.tagName) {
				if (e1.last && e2.last) {
					return pseudo.last = true;
				}
			}
		};
		
		var comparators = [commonId,commonTagName,commonClasses,commonIndex,commonIsLast];
		
		//comparision methods
		var score_zero = {score:0};
		var compareElements = function(e1,e2) {
			if (e1 == e2 && e1=='*') {
				e1.hasCommon = true;
				return e1;
			} else if(e1=='*'||e2=='*') {
				return null;
			} else {
				var pseudo = {};
				for (var i = 0; i < comparators.length; i++) {
					var result;
					try {
						if (result = comparators[i](e1, e2, pseudo)) {
							pseudo.hasCommon = true;
						}
					} 
					catch (e) {
					}
				}
				if (pseudo.hasCommon) {
					//pseudo.parents = [e1,e2];
					return pseudo;
				} else delete pseudo;
			}
		};
		
		/**
		 * Important part!
		 * */
		var longestPathSubsequence = function(p1,p2) {
			//console.log("LCS time!");
			//console.log(p1);
			//console.log(p2);
			var table = new Array(p1.length + 1);
			for (var i = 0; i < table.length; i++) {//i(1st path),j(2nd path) are row and column
				table[i] = new Array(p2.length + 1);
				for (var j = 0; j < table[i].length; j++) {
					if (i == 0 || j == 0) table[i][j] = score_zero;
					else {
						var pseudo = compareElements(p1[i - 1], p2[j - 1]);
						if (pseudo) {
							pseudo.score = table[i - 1][j - 1].score + 1
							table[i][j] = pseudo;
						}
						else {
							table[i][j] = table[i - 1][j].score > table[i][j - 1].score ? {
								score: table[i - 1][j].score
							} : {
								score: table[i][j - 1].score
							};
						}
					}
				}
			}
			function recon(i, j) {
				var res;
				var r;
				if (i == 0 || j == 0) return [];
				else if (table[i][j].hasCommon) {
					r = recon(i - 1, j - 1);
					delete table[i][j].score;
					delete table[i][j].hasCommon;
					r.push(table[i][j]);
				}
				else if (table[i - 1][j].score > table[i][j - 1].score) {
					r = recon(i - 1, j);
					r.push('*');
				}
				else {
					r = recon(i, j - 1);
					r.push('*');
				}
				return r;
			}
			var path = recon(p1.length, p2.length);
			delete table;
			return path;
		};

		var flatPathCompare = function(e1,e2){
			var path1 = e1;
			var path2 = e2;
			if(path1.length == path2.length) {
				var result = [];
				var depth = path1.length;
				for(var i=depth-1;i>=0;i--){
					var el;
					if(path1[i]==path2[i]) el  = path1[i];
					else if(el = compareElements(path1[i],path2[i])) ;
					else el = "*";
					result.unshift(el);
				}
				console.log(result);
				return result;
			} else throw new Error("Different path length!");
		}
		
		//start exposed functions.
		
		this.tracker = {
			selected: [],
			rejected: [],
			raw: {
				select: null,
				reject: null,
			},
			highlighted: null,
			xpath: null,
		};
		var tracker = this.tracker;
		var selected = tracker.selected;
		var rejected = tracker.rejected;
		
		var update = function() {
				tracker.xpath = getXPath();
				console.log(tracker.xpath);

				if (!tracker.xpath) {
					tracker.xpath = "";
					tracker.highlighted = [];
				}
				else {
					tracker.highlighted = queryDocument(tracker.xpath);
				} 
			}
		var getXPath = function() {
			if(selected.length == 0) return;
			var result = selected.getXPath();
			console.log(tracker);
			var rejectedXPath = rejected.getXPath();
			if(rejectedXPath) result = "("+result+")" + "["+"not(.=("+rejectedXPath+"))"+"]";
			return result;
		}
		

		
		selected._push = selected.push;
		/**
		 * Adds a new element, recomputes selectorPath
		 * UPDATES selected.path
		 * */
		selected.push = function(e){
			if (contains(selected, e) || contains(rejected, e)) return;
			else if(contains(rejected.results,e)) return;
			else {
				preprocessor(e);
				if (!tracker.raw.select) 
					tracker.raw.select = e.getSelectorPath();
				else {
					//@@@@IMPORTANT@@@@
					var pathArr = e.getSelectorPath();
					tracker.raw.select = longestPathSubsequence(tracker.raw.select,pathArr);
					//@@@@IMPORTANT@@@@
				}
				//console.log(JSON.stringify(tracker.raw.select));
				selected._push(e);
			}
		};
		/**
		 * Removes existing element, recomputes EVERYTHING.
		 * @param {Object} e
		 * UPDATES tracker.raw.select
		 */
		selected.remove = function(e){
			if (contains(selected, e)) selected.splice(selected.indexOf(e), 1);
			else return;
			if (selected.length > 0) {
				var temp = selected[0].getSelectorPath();
				for(var j=1;j<selected.length;j++){
					temp = longestPathSubsequence(selected[j].getSelectorPath(),temp);
				}
				tracker.raw.select = temp;
			}
			else delete tracker.raw.select;
		}
		/**
		 * @return XPath string if tracker.raw.select
		 */
		selected.getXPath = function(){
			if(tracker.raw.select) return array2XPath(tracker.raw.select);
		}

		
		/**
		 * Sorted paths of individual elements according to depth
		 */
		rejected.groups = {};
		/**
		 * selectorPaths of elements according to depth
		 */
		tracker.raw.reject = {};
		rejected._push = rejected.push;
		var isPathInViolation = function(arr){
			var result = queryDocument(array2XPath(arr));
			for(var i=selected.length-1;i>=0;i--){
				if(result.indexOf(selected[i]) >=0 ) return true;
			} 
			return false;
		};
		rejected.push = function(e){
			if (contains(selected, e) || contains(rejected,e)) return;
			preprocessor(e);
			var depth = e.getSelectorPath().length;
			if(!rejected.groups[depth]){
				rejected.groups[depth] = [e.getSelectorPath()];
				tracker.raw.reject[depth] = e.getSelectorPath();
				rejected._push(e);
			}	
			else {
				var temp = flatPathCompare(tracker.raw.reject[depth],e.getSelectorPath());
				if(!isPathInViolation(temp)) {
					rejected.groups[depth].push(e.getSelectorPath());
					tracker.raw.reject[depth] = temp;
					rejected._push(e);
				}
			}
		};
		rejected.remove = function(e){
			var index;
			if((index = rejected.indexOf(e.path)) >= 0) rejected.splice(index, 1);
			else return;
			var depth = e.path.length;
			rejected.groups[depth].splice(rejected.groups[depth].indexOf(e),1);
			if(rejected.groups[depth].length > 0) {
				var temp = rejected.groups[depth][0];
				for(var i=1;i<rejected.groups[depth].length;i++) temp = flatPathCompare(temp,rejected.groups[depth][1]);
				tracker.raw.reject[depth] = temp;
			} else {
				delete rejected.groups[depth];
				delete tracker.raw.reject[depth];
			}
		};
		rejected.getXPath = function(){
			var groups = tracker.raw.reject;
			var resultXPath;
			var temp;
			for(var i in groups) {
				if(groups[i]) {
					if(resultXPath) resultXPath = resultXPath + " | " + array2XPath(groups[i]);
					else resultXPath = array2XPath(groups[i]);
				}
			}
			console.log(resultXPath);
			return resultXPath;
		}

		this.loadRaw = function(raw) {
			tracker.raw = raw;
			console.log(raw);
			if(raw.select) {
				var placeholder = {
					path: raw.select,
					model: raw.select[raw.select.length-1],
					tagName: raw.select[raw.select.length-1].tagName,
					getSelectorPath : function() {return placeholder.path},
					className: ""
				};
				selected._push(placeholder);
				console.log(selected);
			}
			update();
		};
		this.selectElement = function(el) {
			selected.push(el);
			update();
		};
		this.selectedDelete = function(el) {
			selected.remove(el);
			update();
		};
		this.rejectElement = function(el) {
			rejected.push(el);
			update();
		};
		this.rejectedDelete = function(el) {
			rejected.remove(el);
			update();
		};
	};

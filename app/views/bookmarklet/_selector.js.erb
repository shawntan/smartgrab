	
	var ParcelsSelector = function(){
		var error = new Error("No match!");
		var methods = {//special methods to zhng elements
		//[this] refers to element!
			getIndex: function(){
				if (this.index) return this.index;
				var result = 1;
				var temp = this;
				var tagname = this.tagName;
				//end
				while (temp = temp.previousSibling){
					if (temp.tagName == tagname) result++;
				} 
				if (result > 0) {
					this.index = result;
					return result;
				}
			},
			isLast: function() {
				if(this.last != null) return this.last;
				var tl = this.parentNode.children[this.parentNode.children.length-1];
				do {
					if(tl==this) {
						this.last = true;
						return this.last;
					}
					tl = tl.previousSibling;
				} while (tl.tagName!=this.tagName);
				return false;
			},
			getClasses: function() {
				if (this.classes) return this.classes;
				if (this.className){
					var result = this.className.split(/\s+/);
					var index;
					for(var i=classignorelist.length-1;i>=0;i--)
						if((index = result.indexOf(classignorelist[i]))>=0)
							result.splice(index, 1);
					return this.classes = result;
				}
			},
			getPath: function() {
				if (this.path) return this.path;
				else {
					var curr = this;
					var result = [];
					do {
						preprocessor(curr);
						result.unshift(curr);
						curr = curr.parentNode
					} while ((curr != document.body));
					this.path = result;
					return result;
				}
			},
			getSelector:  function(){
				var result = this.tagName.toLowerCase();
				var selector;
				if(this.id){
					selector=  "@id='"+this.id+"'";
				} else selector = this.getIndex();
				return result+'['+selector+']';
			},
			getXPath:function(){
				if(this.id){
					return "//"+this.getSelector();
				} else if (this.parentNode == document.body){
					return "/html/body/"+this.getSelector();
				} else {
					if(!this.parentNode.preprocessed) preprocessor(this.parentNode);
					return this.parentNode.getXPath()+"/"+this.getSelector();
				}
				
			}
		};
		var PseudoElement = function(){
		};
		var selector_priority = [
			function(pe){
				if(pe.classes) return "contains(concat(' ',@class,' '),' " + pe.classes[0] + " ')";
			},
			function(pe){
				if(pe.index) return pe.index;
			},
			function(pe){
				if(pe.last) return "last()";
			}
		];
		PseudoElement.prototype = {
			preprocessed: true,
			getIndex: function(){
				if(this.index) return this.index;
				else throw error;
			},
			isLast: function(){
				if(this.last != null) return this.last;
				else throw error;
			},
			getClasses: function(){
				if(this.classes) return this.classes;
				else throw error;
			},
			getPath: function(){
				if(this.path) return this.path;
				else throw error;
			},
			getSelector: function(){
				var result;
				if(this.tagName)result = this.tagName.toLowerCase();
				else result = "*";
				var selector;
				for(var i=0;i<selector_priority.length;i++){
					selector = selector_priority[i](this);
					if(selector) break;
				}
				return result + (selector?'['+selector+']':"");
			},
			getXPath: function(){
				if(this.path) {
					var path = this.path;
					var result = this.getSelector();
					var match_any = false;
					for(var i=path.length-2;i>=0;i--){
						var temp;
						if(path[i].getXPath && (temp=path[i].getXPath())){
							return temp+'/'+result;
						} else if(path[i]=='*'){
							if(match_any) continue;
							else {
								result = "/"+result;
								match_any = true;
							}
						}
						else {
							match_any = false;
							result = path[i].getSelector()+'/'+result;
						}
					}
					return "/html/body/"+result;
				}
			}
		};
		
		var preprocessor = function(e) {
			if(e.preprocessed) return;
			bindAllMethods(e,methods);
			e.preprocessed = true;
		}
		var commonTagName = function(e1,e2,pseudo){
			if (e1.tagName == e2.tagName) {
				return pseudo.tagName = e1.tagName;
			}
		};
		var commonClasses = function(e1,e2,pseudo) {
			var classes1 = e1.getClasses();
			var classes2 = e2.getClasses();
			if(classes1.length==0||classes2.length==0) return;
			var results = [];
			var i = classes1.length;
			while (i--) {
				if(classes1[i] == "parcels_selected") continue;
				else if(classes1[i] == "parcels_highlight") continue;
				else if (classes2.indexOf(classes1[i]) >= 0) results.unshift(classes1[i]);
			}
			if(results.length > 0) return pseudo.classes = results;
		};
		var commonIndex   = function(e1,e2,pseudo){
			if(pseudo.tagName|| e1.tagName==e2.tagName) {
				if(e1.getIndex() == e2.getIndex()) {
					pseudo.index = e1.getIndex();
				}
			}

		};
		var commonIsLast  = function(e1,e2,pseudo) {
			if (pseudo.tagName || e1.tagName == e2.tagName) {
				if (e1.isLast() && e2.isLast()) {
					return pseudo.last = true;
				}
			}
		};
		var comparators = [commonTagName,commonClasses,commonIndex,commonIsLast];
		//comparision methods
		var compareElements = function(e1,e2) {
			preprocessor(e1);
			preprocessor(e2);
			if (e1 == e2) {
				e1.hasCommon = true;
				return e1;
			}
			else if(e1=='*'||e2=='*'){
				return null;
			}
			else {
				var pseudo = new PseudoElement();
				for (var i = 0; i < comparators.length; i++) {
					var result;
					try {
						if (result = comparators[i](e1, e2, pseudo)) {
							pseudo.hasCommon = true;
						}
					} 
					catch (e) {
					}
				}
				if (pseudo.hasCommon) {
					pseudo.parents = [e1,e2];
					return pseudo;
				}
				else 
					delete pseudo;
			}
		};
		var score_zero = {score:0};
		var longestPathSubsequence = function(e1,e2) {
			var p1 = e1.getPath();
			var p2 = e2.getPath();
			var table = new Array(p1.length + 1);
			for (var i = 0; i < table.length; i++) {//i(1st path),j(2nd path) are row and column
				table[i] = new Array(p2.length + 1);
				for (var j = 0; j < table[i].length; j++) {
					if (i == 0 || j == 0) table[i][j] = score_zero;
					else {
						var pseudo = compareElements(p1[i - 1], p2[j - 1]);
						if (pseudo) {
							pseudo.score = table[i - 1][j - 1].score + 1
							table[i][j] = pseudo;
						}
						else {
							table[i][j] = table[i - 1][j].score > table[i][j - 1].score ? {
								score: table[i - 1][j].score
							} : {
								score: table[i][j - 1].score
							};
						}
					}
				}
			}
			function recon(i, j) {
				var res;
				var r;
				if (i == 0 || j == 0) return [];
				else if (table[i][j].hasCommon) {
					r = recon(i - 1, j - 1);
					r.push(table[i][j]);
				}
				else if (table[i - 1][j].score > table[i][j - 1].score) {
					r = recon(i - 1, j);
					r.push('*');
				}
				else {
					r = recon(i, j - 1);
					r.push('*');
				}
				return r;
			}
			var path = recon(p1.length, p2.length);
			delete table;
			path[path.length-1].path = path;
			return path[path.length-1];
		}	
		
		//higher level methods
		var last_cached_result = {
			selected: null,
			rejected: null
		};
		var calculateXPath = function(type,newElement){ //type:"selected","rejected"
			var result;
			preprocessor(newElement);
			if(last_cached_result[type]) {
				result = longestPathSubsequence(last_cached_result[type],newElement);
			} else {
				result = tracker[type][0];
				for(var i=1;i<tracker[type].length;i++){
					result = longestPathSubsequence(result,tracker[type][i]);
				}
			}
			last_cached_result[type] = result;
			return result;
		}
		
		//start exposed functions.
		this.tracker = {
			selected: [],
			rejected: [],
			xpath: null
		};
		var tracker = this.tracker;
		var selected = tracker.selected;
		var rejected = tracker.rejected;
		this.selectElement = function(el) {
			if (contains(selected, el) || contains(rejected,el)) return;
			else selected.push(el);
			var result = calculateXPath("selected",el);
			tracker.xpath = result.getXPath();
			return tracker;
		};
		this.selectedDelete = function(el) {
			if (contains(selected, el)){
				last_cached_result.selected = null;
				selected.splice(selected.indexOf(el), 1);
			}
			if(selected.length>0){
				var result = calculateXPath("selected",el);
				if(result) tracker.xpath = result.getXPath();
				return tracker;
			} else {
				tracker.xpath = "";
			}
		};
		this.rejectElement = function() {
			if (contains(selected, el) || contains(rejected,el)) return;
			else rejected.push(el);
			return tracker;
		};
		this.rejectedDelete = function() {
			if (contains(rejected, el)){
				last_cached_result.rejected = null;
				rejected.splice(rejected.indexOf(el), 1);
			}
		};
	};
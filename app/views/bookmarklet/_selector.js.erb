	var ParcelsSelector = function(){
		/**
		 * special methods to zhng elements
		 */
		Element.prototype.getSelectorPath = function() {
			var curr = this;
			var result = [];
			do {
				preprocessor(curr);
				result.unshift(curr.model);
				curr = curr.parentNode
			} while ((curr != document.body));
			this.path = result;
			return result;
		};
		var preprocessor = function(e) {
			if (e.model) return;
			else {
				var result = {
					tagName: e.tagName.toLowerCase(),
					index: e.getIndex()
				};
				var last = e.isLast();
				if (last) result.last = last;
				var classes = e.getClasses();
				if (classes) result.classes = classes;
				e.model = result;
			}
		};

		/**
		 * Lists priority in selector for XPath string.
		 **/
		var selector_priority = [
			function(pe){if (pe.classes) return "contains(concat(' ',@class,' '),' " + pe.classes[0] + " ')"},
			function(pe){if(pe.index) return pe.index},
			function(pe){if(pe.last) return "last()"},
		];
		
		var selector = function(e) {
			var tagName = e.tagName;
			var selector;
			for(var i=0;i<selector_priority.length;i++){
				selector = selector_priority[i](e);
				if(selector) break;
			}
			return tagName + (selector?'['+selector+']':"");
		};
		var array2XPath = function(arr) {
			var result = "";
			var match_any = false;
			for(var i=0;i<arr.length;i++){
				if(arr[i]=='*') {
					if(match_any) continue;
					else {
						match_any = true;
						result = result + '/';
					}
				} else {
					result = result + '/' + selector(arr[i]); 
					match_any = false;
				}
			}
			return "/html/body"+result;
		};
		
		var commonTagName = function(e1,e2,pseudo){
			if (e1.tagName == e2.tagName) {
				return pseudo.tagName = e1.tagName;
			}
		};
		var commonClasses = function(e1,e2,pseudo){
			var classes1 = e1.classes;
			var classes2 = e2.classes;
			if(classes1.length==0||classes2.length==0) return;
			var results = [];
			var i = classes1.length;
			while (i--) {
				if(classes1[i] == "parcels_selected") continue;
				else if(classes1[i] == "parcels_highlight") continue;
				else if(classes2.indexOf(classes1[i]) >= 0) results.unshift(classes1[i]);
			}
			if(results.length > 0) return pseudo.classes = results;
		};
		var commonIndex   = function(e1,e2,pseudo){
			if(pseudo.tagName|| e1.tagName==e2.tagName) {
				if(e1.index==e2.index) {
					pseudo.index = e1.index;
				}
			}

		};
		var commonIsLast  = function(e1,e2,pseudo){
			if (pseudo.tagName || e1.tagName == e2.tagName) {
				if (e1.last && e2.last) {
					return pseudo.last = true;
				}
			}
		};
		
		var comparators = [commonTagName,commonClasses,commonIndex,commonIsLast];
		
		//comparision methods
		var score_zero = {score:0};
		var compareElements = function(e1,e2) {
			if (e1 == e2 && e1=='*') {
				e1.hasCommon = true;
				return e1;
			} else if(e1=='*'||e2=='*') {
				return null;
			} else {
				var pseudo = {};
				for (var i = 0; i < comparators.length; i++) {
					var result;
					try {
						if (result = comparators[i](e1, e2, pseudo)) {
							pseudo.hasCommon = true;
						}
					} 
					catch (e) {
					}
				}
				if (pseudo.hasCommon) {
					//pseudo.parents = [e1,e2];
					return pseudo;
				} else delete pseudo;
			}
		};
		
		/**
		 * Important part!
		 * */
		var longestPathSubsequence = function(p1,p2) {
			var table = new Array(p1.length + 1);
			for (var i = 0; i < table.length; i++) {//i(1st path),j(2nd path) are row and column
				table[i] = new Array(p2.length + 1);
				for (var j = 0; j < table[i].length; j++) {
					if (i == 0 || j == 0) table[i][j] = score_zero;
					else {
						var pseudo = compareElements(p1[i - 1], p2[j - 1]);
						if (pseudo) {
							pseudo.score = table[i - 1][j - 1].score + 1
							table[i][j] = pseudo;
						}
						else {
							table[i][j] = table[i - 1][j].score > table[i][j - 1].score ? {
								score: table[i - 1][j].score
							} : {
								score: table[i][j - 1].score
							};
						}
					}
				}
			}
			function recon(i, j) {
				var res;
				var r;
				if (i == 0 || j == 0) return [];
				else if (table[i][j].hasCommon) {
					r = recon(i - 1, j - 1);
					delete table[i][j].score;
					delete table[i][j].hasCommon;
					r.push(table[i][j]);
				}
				else if (table[i - 1][j].score > table[i][j - 1].score) {
					r = recon(i - 1, j);
					r.push('*');
				}
				else {
					r = recon(i, j - 1);
					r.push('*');
				}
				return r;
			}
			var path = recon(p1.length, p2.length);
			delete table;
			return path;
		};

		var flatPathCompare = function(e1,e2){
			var path1 = e1.getSelectorPath();
			var path2 = e2.getSelectorPath();
			if(path1.length == path2.length) {
				var result = [];
				var depth = e1.getSelectorPath().length;
				for(var i=depth-1;i>=0;i--){
					var el;
					if(path1[i]==path2[i]) el  = path1[i];
					else if(el = compareElements(path1[i],path2[i]));
					else el = "*";
					result.unshift(el);
				}
				result[result.length-1].path =result;
				return result[result.length-1];
			} else throw new Error("Different path length!");
		}
		
		//start exposed functions.
		this.tracker = {
			selected: [],
			rejected: [],
			highlighted: null,
			xpath: null,
			update: function() {
				tracker.xpath = tracker.getXPath();
				if (!tracker.xpath) {
					tracker.xpath = "";
					tracker.highlighted = [];
				}
				else {
					tracker.highlighted = queryDocument(tracker.getXPath());
				} 
			}
		};
		var tracker = this.tracker;
		tracker.getXPath = function() {
			if(selected.length == 0) return;
			var result = selected.getXPath();
			var rejectedXPath = rejected.getXPath();
			if(rejectedXPath) result = "("+result+")" + "["+"not(.=("+rejectedXPath+"))"+"]";
			return result;
		}
		
		var selected = tracker.selected;		
		var rejected = tracker.rejected;
		
		selected._push = selected.push;
		selected.push = function(e){
			if (contains(selected, e) || contains(rejected, e)) return;
			else if(contains(rejected.results,e)) return;
			else {
				preprocessor(e);
				if (!selected.path) 
					selected.path = e.getSelectorPath();
				else {
					//@@@@IMPORTANT@@@@
					var pathArr = e.getSelectorPath();
					selected.path = longestPathSubsequence(selected.path,pathArr);
					//@@@@IMPORTANT@@@@
				}
				console.log(JSON.stringify(selected.path));
				selected._push(e);
				selected.results = selected.getResults();
			}
		};
		selected.remove = function(e){
			if (contains(selected, e)) selected.splice(selected.indexOf(e), 1);
			else return;
			if (selected.length > 0) {
				var temp = selected[0];
				for(var j=1;j<selected.length;j++){
					temp = longestPathSubsequence(selected[j],temp);
				}
				selected.path = temp;
			}
			else delete selected.path;
			selected.results = selected.getResults();
		}
		selected.getXPath = function(){
			if(selected.path) return array2XPath(selected.path);
		}
		selected.getResults = function(){
			var results;
			var xpath = array2XPath(selected.path);
			console.log(xpath);
			if(selected.path) results = queryDocument(xpath);
			tracker.update();
			return results;
		}
		
		rejected.groups = {};
		rejected._push = rejected.push;
		rejected.push = function(e){
			if (contains(selected, e) || contains(rejected,e)) return;
			preprocessor(e);
			var depth = e.getSelectorPath().length;
			if(!rejected.groups[depth])	rejected.groups[depth] = new RejectTagArray();
			if(rejected.groups[depth].push(e)) {
				rejected._push(e);
				rejected.results = rejected.getResults();
			}
		};
		rejected.remove = function(e){
			var index;
			if((index = rejected.indexOf(e)) >= 0) rejected.splice(index, 1);
			else return;
			var depth = e.getSelectorPath().length;
			rejected.groups[depth].remove(e);
			rejected.results = rejected.getResults();
		};
		rejected.getXPath = function(){
			var groups = rejected.groups;
			var resultXPath;
			var temp;
			for(var i in groups) {
				if(groups[i] && groups[i].path) {
					if(resultXPath) resultXPath = resultXPath + " | " + array2XPath(groups[i].path);
					else resultXPath = array2XPath(groups[i].path);
				}
			}
			return resultXPath;
		}
		rejected.getResults = function(){
			tracker.update();
			return queryDocument(rejected.getXPath());
		};
		var RejectTagArray= function(){
			var arr = [];
			arr._push = arr.push;
			arr.push = function(e){
				var temp = arr.path;//save previous
				if (!arr.path) arr.path = e;
				else arr.path = flatPathCompare(arr.path,e);
				if(arr.isPathInViolation()) {
					arr.splice(arr.indexOf(e), 1);
					arr.path = temp;
					return false;
				} else {
					arr._push(e);
				}
				return true;
			};
			arr.isPathInViolation = function() {
				var result = queryDocument(array2XPath(arr.path));
				for(var i=selected.length-1;i>=0;i--){
					if(result.indexOf(selected[i])>=0) return true;
				}
				return false;
			}
			arr.remove = function(e){
				arr.splice(arr.indexOf(e), 1);
				if(arr.length > 0) {
					var temp = arr[0];
					for(var j=1;j<arr.length;j++){
						temp = flatPathCompare(temp,arr[j]);
					}
					arr.path = temp;	
				} else delete arr.path;
			}
			return arr;
		}
		
		this.selectElement = function(el) {
			selected.push(el);
			console.log(window.test = this);
		};
		this.selectedDelete = function(el) {
			selected.remove(el)
		};
		this.rejectElement = function(el) {
			rejected.push(el);
		};
		this.rejectedDelete = function(el) {
			rejected.remove(el);
		};
	};

HTMLElement.prototype.getAbstractElement = function() {
	if(this._obj) return this._obj;
	var obj = new Object();
	for(var i in Features) {
		var value = Features[i].extract(this);
		if(value) obj[i] = value;
	}
	this._obj = obj;
	return obj
};

HTMLElement.prototype.getPath = function() {
	if(this._path) return this._path;
	var el = this;
	var path = []
	while(el != document.body) {
		path.unshift(el.getAbstractElement());
		el = el.parentNode;
	}
	this._path = path;
	return path;
};
var matcher = function(el1,el2) {return (el1.tagName!='*')?el1.tagName==el2.tagName:false;}
var scorer = function(el1,el2) {
	if(el1=='*'||el2=='*') return Features_max_score*(-2);
	else if(el1==el2) return Features_max_score*2;
	var score = 0;
	for(var i in Features){
		if(el1[i] && el2[i]) score += Features[i].compare.score(el1[i],el2[i]);
	}
	return score;
};
var merger = 	function(x,y,p1,p2,result) {
	var obj = new Object(),val;
	for(var i in Features){
		if(p1[x][i] && p2[y][i]) {
			val = Features[i].compare.value(p1[x][i],p2[y][i]);
			if(val) obj[i] = val;
		}
	}
	if(obj.tagName == '*' && obj.index) {
		if(obj.abs) obj.index=obj.abs;
		else delete obj.index;
	}
	result.unshift(obj);
};
var matchAlign = new Align(
	matcher,
	scorer,
	merger,
	function(x,y,a,b,result) {result.unshift("*");},
	function(){return new Array();}
);

var rejectAlign = new Align(
	matcher,
	scorer,
	function(x,y,p1,p2,result) {
		if(p1[x]==p2[y]) return;
		var obj = null;
		for(var i in Features) {
			if(Features[i].compare){
				var a;
				if (p2[y][i] && (a = Features[i].compare.reject(p1[x][i],p2[y][i]))){
					if(!obj) obj = new Object();
					obj[i] = a;
				}
			}
		}
		if(obj) {
			obj.tagName = p2[y].tagName;
			for(var i in obj) {
				result.unshift(obj);
				break;
			}
		}
	},
	function(x,y,p1,p2,result) {result.unshift(p2[y]);},
	function(path1,path2){return new Array();}
);
var interRejectAlign = new Align(
	matcher,
	scorer,
	merger,
	function(x,y,p1,p2,result) {},
	function(path1,path2){return new Array();}
);
var serialisePath = function(obj){
	var result = serialisePositivePath(obj.selected)+(obj.rejected?"["+serialiseRejectedPath(obj.rejected)+"]":"");
	console.log(result);
	return result;
}
var serialisePositivePath = function(arr){
	if(!arr) return null;
	var xpath = "",f=true;
	for(var i=arr.length-1;i>=0;i--){
		if(arr[i]=="*"){
			if(f){
				xpath = "/"+xpath;
				f=false;
			}
		}
		else {
			var tag = arr[i].tagName,token = tag;
			var s;
			for(var f in Features) {
				if(Features[f].selector && arr[i][f]) {
					s = "["+Features[f].selector(arr[i][f])+"]";
					if(Features[f].unique) return "//"+tag+s+xpath;
					else token += s;
				}
			}
			xpath = "/"+token+xpath;
			f=true;
		}
	}
	return "/html/body"+xpath;
};
var serialiseRejectedPath = function(arr){
	if(!arr) return null;
	var obj,selstr,result;
	for(var i=arr.length-1;i>=0;i--) {
		obj = arr[i];
		selstr = "ancestor-or-self::"+obj.tagName;
		var s;
		for(var f in Features){
			if(Features[f].selector && obj[f]) {
				if(Features[f].nselector) s = Features[f].nselector(obj);
				else if(Features[f].selector) s = Features[f].selector(obj[f]);
				if(s) selstr = selstr +"["+s+"]";
				else console.log("Error with attribute: "+f);
			}
		}
		result = ((i==arr.length-1)?"":(result + " and "))+ selstr;
	}
	return "not("+result+")";
};

var pathComparator = function(a,b){return a._path.length - b._path.length}
var GrabSelector = function(resObj) {
	var selected = new SimpleSet();
	var rejected = new SimpleSet();
	var s = this.selected = selected.toArray();
	var r = this.rejected = rejected.toArray();


	var res = this.result = {
		tag: null,
		obj: null,
		xpath: "",
	};
	if(resObj){
		res.obj = resObj;
		res.xpath = serialisePath(res.obj);
		res.tag = resObj.selected[resObj.selected.length-1].tagName;
	} else res.obj = {selected:null,rejected:null};

	var recalculate = function(list,alignFun,initpath) {
		list.sort(pathComparator);
		var p = initpath?initpath:list[0]._path;
		for(var i=(initpath)?1:0;i<list.length;i++) p = alignFun(p,list[i]._path);
		return p;
	};

	this.select = function(el) {
		selected.add(el);
		if(res.obj.selected) res.obj.selected = matchAlign(res.obj.selected,el.getPath());	
		else {
			res.obj.selected = el.getPath();
			res.tag = el.tagName;
		}
		res.xpath = serialisePath(res.obj);
	};
	this.deselect = function(el) {
		selected.remove(el);
		if(s.length > 0){
			res.obj.selected = recalculate(s,matchAlign);
			res.xpath = serialisePath(res.obj);
		}
		else {
			res.obj.selected = null;
			res.tag = null;
			res.xpath = null;
		}
	};
	this.reject = function(el) {
		rejected.add(el);
		if(res.obj.rejected)res.obj.rejected = interRejectAlign(res.obj.rejected,el.getPath());
		else {
			res.obj.rejected = rejectAlign(res.obj.selected,el.getPath());
		}
		res.xpath = serialisePath(res.obj);
	};
	this.dereject = function(el) {
		rejected.remove(el);
		if(r.length > 0) {
			res.obj.rejected = rejectAlign(res.obj.selected,r[0].getPath());
			res.obj.rejected = recalculate(r,interRejectAlign,res.obj.rejected);
		}
		else {
			res.obj.rejected = null;
		}
		res.xpath = serialisePath(res.obj);
	};
};
